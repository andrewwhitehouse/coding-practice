service: snapnext

custom:
  imagesBucketName: andrew-serverless-pipeline-images
  imagesTableName: andrew-serverless-pipeline-images
  originalsFolderName: andrew-originals
  processedFolderName: andrew-processed

provider:
  name: aws
  runtime: nodejs9.11.2
  region: eu-west-2
  environment:
    IMAGES_BUCKET_NAME: ${self:custom.imagesBucketName}
    IMAGES_TABLE_NAME: ${self:custom.imagesTableName}
    ORIGINAL_FOLDER_NAME: ${self:custom.originalsFolderName}
    PROCESSED_FOLDER_NAME: ${self:custom.processedFolderName}
  iamRoleStatements:
  - Effect: Allow
    Action:
      - S3:GetObject
      - S3:PutObject
      - S3:PutObjectAcl
    Resource:
      - Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - "${self:custom.imagesBucketName}/*"
  - Effect: Allow
    Action:
      - rekognition:DetectFaces
    Resource: "*"
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:DescribeStream
      - dynamodb:GetRecords
      - dynamodb:GetShardIterator
      - dynamodb:ListStreams
    Resource:
      - Fn::Join:
          - ""
          - - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:"
            - "table/${self:custom.imagesTableName}"
      - Fn::Join:
          - ""
          - - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:"
            - "table/${self:custom.imagesTableName}/stream/*"

resources:
  Resources:
    ImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.imagesTableName}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

functions:
  downloadImage:
    handler: functions/downloadImage.handler
    events:
      - http:
          path: images
          method: post
  analyzeImage:
    handler: functions/analyzeImage.handler
    events:
      - s3:
          bucket: ${self:custom.imagesBucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${self:custom.originalsFolderName}
  processImage:
    handler: functions/processImage.handler
    layers:
      - arn:aws:lambda:eu-west-2:462920085534:layer:image-magick:1
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - ImagesTable
              - StreamArn
  viewImage:
    handler: functions/viewImage.handler
    events:
      - http:
          path: images/{id}
          method: get
  viewImages:
    handler: functions/viewImages.handler
    events:
      - http:
          path: images
          method: get